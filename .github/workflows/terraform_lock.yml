name: Terraform Lock

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  # NOTE: please keep these in sync with ../../.terra*-version
  tf_version: "1.6.4"
  tg_version: "0.53.5"
  working_dir: "."
  deploy_environ: "dev"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # TODO: use action/direnv to keep these centralized and in sync with manual
  # behavior
  TERRAGRUNT_INCLUDE_MODULE_PREFIX: true
  TF_CLI_ARGS_plan: "-lock=false -out=plan"

defaults:
  run:
    # enable xtrace and nounset by default
    # the default default is:
    #      bash --noprofile --norc -eo pipefail {0}
    shell: bash --noprofile --norc -eo pipefail -ux {0}

jobs:
  determine-tf-root-modules:
    name: "Determine TF slices to lock"
    if: github.event.pull_request.draft == false

    runs-on: ubuntu-latest
    outputs:
      slices: ${{ steps.slices.outputs.slices }}

    steps:
      - name: show event
        run: |
          : <<'EOF'
            ${{toJSON(github.event)}}
          EOF

      - id: files
        uses: getsentry/paths-filter@v2.11.1
        with:
          filters: "all: ['**']"
          list-files: json

      - name: Checkout our scripts
        uses: actions/checkout@v4

      # see ./.python-version
      - uses: actions/setup-python@v5

      - id: slices
        run: |
          ( echo -n slices=
            ./lib/ci/dependent-slices  <<'EOF'
          ${{steps.files.outputs.all_files}}
          EOF
          ) | tee -a "$GITHUB_OUTPUT"

  terraform_lock:
    if: github.event.pull_request.draft == false && needs.determine-tf-root-modules.outputs.slices != '[]'
    needs: [determine-tf-root-modules]

    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    strategy:
      fail-fast: false
      matrix:
        tf-root-module:
          ${{ fromJSON(needs.determine-tf-root-modules.outputs.slices) }}
    
    outputs:
      lock_results: ${{ steps.lock_check.outputs.lock_results }}

    steps:
      - name: Checkout our scripts
        uses: actions/checkout@v3

      - name: set workload identity provider
        id: set-workload-identity-provider
        run: ./lib/ci/set-workload-identity-provider "$deploy_environ"

      - name: set terraformer
        id: set-terraformer
        working-directory: ${{ env.working_dir }}
        run: ./lib/ci/set-terraformer

      - name: gcp auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{steps.set-workload-identity-provider.outputs.workload_identity_provider}}
          service_account: ${{steps.set-terraformer.outputs.terraformer}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Install expect
        run: ./lib/ci/install-expect

      - name: Obtain the lock
        id: lock_check
        run: |
          output=$(./lib/ci/obtain-lock '${{matrix.tf-root-module}}')
          lock_obtained=$(echo "$output" | jq -r '.lock_obtained')
          echo "Lock obtained: $lock_obtained"
          existing_json=$(cat $GITHUB_OUTPUT)
          if ! echo $existing_json | jq 'has("lock_results") and (.lock_results|type=="array")'; then
            existing_json='{"lock_results": []}'
          fi
          echo "Existing JSON: $existing_json"
          merged_json=$(echo $existing_json | jq -c ".lock_results += [{\"slice\": \"${{matrix.tf-root-module}}\", \"lock_obtained\": \"$lock_obtained\"}]")
          echo "Merged JSON: $merged_json"
          echo $merged_json > $GITHUB_OUTPUT

  summarize_lock_results:
    needs: [terraform_lock]
    if: always() && needs.terraform_lock.outputs.lock_results != '[]'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout our scripts
        uses: actions/checkout@v3

      - name: Comment on PR with lock summary
        uses: actions/github-script@v7
        with:
          script: |
            const lockResults = ${{ needs.terraform_lock.outputs.lock_results }}
            const script = require('./src/lock-summary-comment.js')
            console.log(script({github, context, lockResults}))
